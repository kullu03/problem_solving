package com.intw.practice.array;

public class MaximumSubMatrix {

	public static void main(String[] args) {
		int  [] [] inp = {
				   {0,1,1,0,1}, 
				   {1,1,0,1,0}, 
				   {0,1,1,1, 0},
				   {1,1,1,1,0},
				   {1,1,1,1,1},
				   {0,0,0,0,0}
				   };
		
		 getMaxMatrix(inp);
		

	}

	private static void getMaxMatrix(int[][] inp) {
		int res [] [] = new int[inp.length][];
				int start = 0;
		int left = 0;
		int right = 0;
		int bottom = 0;
		int i = 0;
			// copy first row as it is
			for(int j = 0; j < inp[0].length; j++){
				 res[i][j] = inp[i][j];
				}
			
		// copy first column as it is
		
		int k = 0;
		
		for(int n  = 0; n < inp[0].length; n++){
			res[n][k] = inp[n][k];
		}
		
		// for other entries 
		// first row and first column is already filled
		// start from row 1 and column 1 
		
		for(int ii = 1; ii < inp.length; ii++){
			
			for(int jj = 0; jj < inp.length; jj++){
				
				if(inp[ii][jj]==0){
					res[ii][jj] =0;
				}
				else{
					res[ii][jj] = getMin(inp[ii][jj],inp[ii-1][jj],inp[ii][jj-1]);
				}
			}
		}
		
		for(int ii =0; ii < res.length; ii++){
			for(int jj =0; jj < res.length ; jj++){
				System.out.println(res[ii][jj]+ ",");
			}
			System.out.println(" ");
		}


		
	}

	private static int getMin(int i, int j, int k) {
		if( i ==1 && j ==1 && k ==1)
		return 1;
		return 0;
	}

}
