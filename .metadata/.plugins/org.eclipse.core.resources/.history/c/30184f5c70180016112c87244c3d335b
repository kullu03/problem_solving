package com.practice.ds.trie;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

/**
 * @author Kuldeep Singh
 * 
 * insert/search/delete op in Trie
 *
 */
public class Trie {

	private class TrieNode{
		 Map<Character,TrieNode>children;
		 boolean isEndOfWord;

		public TrieNode() {
			//super();
			children = new HashMap<Character,TrieNode>();
			isEndOfWord = false;
		}
	}

	private final TrieNode root;

	public Trie() {
		//super();
		root = new TrieNode();
	}


	public void insert(String word) {
		TrieNode current = root;
		
		for (int i = 0; i < word.length(); i++) {
			char c = word.charAt(i);
			TrieNode node = current.children.get(c);
			if (node == null) {
				node = new TrieNode();
				current.children.put(c, node);

			} 
			current  = node;

		}
		current.isEndOfWord = true;

	}



	public boolean search(String word){
		TrieNode current = root;
		for(int i =0; i < word.length(); i++){
			TrieNode node = current.children.get(word.charAt(i));
			if(node == null){
				return false;
			}
			current = node;
		}

		return current.isEndOfWord;
	}

	public int countForPrefix(String prefix){
		int c =0;
		TrieNode current = root;
		
		for(int i =0 ; i< prefix.length(); i++){
			char ch = prefix.charAt(i);
			TrieNode child = current.children.get(ch);
			if(child == null)return c;
			current = child;
			
		}
		Queue<Character>q = new LinkedList<Character>();
		
		for(Map.Entry<Character, TrieNode>ee: current.children.entrySet()){
			//c = c+1;
			q.add(ee.getKey());
			
		}
		
		while(!q.isEmpty()){
		TrieNode k = current.children.get(q.poll());
		
			for(Map.Entry<Character, TrieNode>ee: current.children.entrySet()){
				if(ee.getValue().isEndOfWord){
					c = c+1;
				}
				else{
				q.add(ee.getKey());
				}
				
			}
			current =k;
		}
		
		
		return c;
		
		
		
	}
	public void printTrie(){
		if(root == null){
			return;
		}
		
		Map<Character,TrieNode> children = root.children;
		if(children == null){
			return ;
		}
		Queue<Map<Character,TrieNode>> q = new LinkedList<Map<Character,TrieNode>>();
		q.add(root.children);
		/*for(Map.Entry<Character, TrieNode>ee: children.entrySet()){
			System.out.println(ee.getKey());
			q.add(ee.getValue().children);
			
		}*/
		
		while(!q.isEmpty()){
			Map<Character,TrieNode> child = q.poll();
			Set<Character> myset = child.keySet();
			System.out.println(myset.toArray(new Character[myset.size()])[0]);
			q.add(child);
			
			
		}
		
	}
	
	

}
